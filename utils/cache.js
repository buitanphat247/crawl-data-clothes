const fs = require('fs');
const path = require('path');
const config = require('../config');

// Cache file path
const CACHE_FILE = path.join(__dirname, '..', 'cache.json');

// H√†m load cache
function loadCache() {
  try {
    if (fs.existsSync(CACHE_FILE)) {
      const cacheData = JSON.parse(fs.readFileSync(CACHE_FILE, 'utf8'));
      const now = Date.now();
      
      // Ki·ªÉm tra cache c√≥ h·∫øt h·∫°n kh√¥ng
      if (now - cacheData.timestamp < config.CACHE_EXPIRY) {
        console.log('üì¶ ƒêang load d·ªØ li·ªáu t·ª´ cache...');
        return cacheData.data;
      } else {
        console.log('‚è∞ Cache ƒë√£ h·∫øt h·∫°n, s·∫Ω crawl l·∫°i...');
        fs.unlinkSync(CACHE_FILE); // X√≥a cache c≈©
      }
    }
    return null;
  } catch (error) {
    console.log('‚ùå L·ªói khi load cache:', error.message);
    return null;
  }
}

// H√†m save cache
function saveCache(data) {
  try {
    const cacheData = {
      timestamp: Date.now(),
      data: data
    };
    fs.writeFileSync(CACHE_FILE, JSON.stringify(cacheData, null, 2));
    console.log('üíæ ƒê√£ l∆∞u cache th√†nh c√¥ng!');
    return true;
  } catch (error) {
    console.log('‚ùå L·ªói khi l∆∞u cache:', error.message);
    return false;
  }
}

// H√†m x√≥a cache
function clearCache() {
  try {
    if (fs.existsSync(CACHE_FILE)) {
      fs.unlinkSync(CACHE_FILE);
      console.log('üóëÔ∏è ƒê√£ x√≥a cache');
      return true;
    }
    return false;
  } catch (error) {
    console.log('‚ùå L·ªói khi x√≥a cache:', error.message);
    return false;
  }
}

// H√†m ki·ªÉm tra cache c√≥ t·ªìn t·∫°i kh√¥ng
function hasCache() {
  return fs.existsSync(CACHE_FILE);
}

module.exports = {
  loadCache,
  saveCache,
  clearCache,
  hasCache
};
