var express = require('express');
var app = express();
const cheerio = require('cheerio');
const request = require('request-promise');
const fs = require('fs');
const path = require('path');

// Bi·∫øn global ƒë·ªÉ l∆∞u d·ªØ li·ªáu
let crawlData = [];
let isCrawling = false;
let crawlCompleted = false;

// C·∫•u h√¨nh test mode
const TEST_MODE = false;
const MAX_PRODUCTS = 1;
const MAX_NEXT_PAGES = 3;

// Cache file path
const CACHE_FILE = path.join(__dirname, 'cache.json');
const CACHE_EXPIRY = 30 * 60 * 1000; // 30 ph√∫t

// Serve static HTML file
app.get('/', function (req, res) {
  res.sendFile(__dirname + '/index.html');
});

// H√†m load cache
function loadCache() {
  try {
    if (fs.existsSync(CACHE_FILE)) {
      const cacheData = JSON.parse(fs.readFileSync(CACHE_FILE, 'utf8'));
      const now = Date.now();
      
      // Ki·ªÉm tra cache c√≥ h·∫øt h·∫°n kh√¥ng
      if (now - cacheData.timestamp < CACHE_EXPIRY) {
        console.log('üì¶ ƒêang load d·ªØ li·ªáu t·ª´ cache...');
        crawlData = cacheData.data;
        crawlCompleted = true;
        return true;
      } else {
        console.log('‚è∞ Cache ƒë√£ h·∫øt h·∫°n, s·∫Ω crawl l·∫°i...');
        fs.unlinkSync(CACHE_FILE); // X√≥a cache c≈©
      }
    }
    return false;
  } catch (error) {
    console.log('‚ùå L·ªói khi load cache:', error.message);
    return false;
  }
}

// H√†m save cache
function saveCache(data) {
  try {
    const cacheData = {
      timestamp: Date.now(),
      data: data
    };
    fs.writeFileSync(CACHE_FILE, JSON.stringify(cacheData, null, 2));
    console.log('üíæ ƒê√£ l∆∞u cache th√†nh c√¥ng!');
  } catch (error) {
    console.log('‚ùå L·ªói khi l∆∞u cache:', error.message);
  }
}

// API endpoint ƒë·ªÉ tr·∫£ v·ªÅ d·ªØ li·ªáu JSON
app.get('/api/data', function (req, res) {
  res.json(crawlData);
});

// API endpoint ƒë·ªÉ force crawl l·∫°i
app.get('/api/force-crawl', function (req, res) {
  if (isCrawling) {
    return res.json({ message: 'ƒêang crawl, vui l√≤ng ch·ªù...', isCrawling: true });
  }
  
  // X√≥a cache v√† crawl l·∫°i
  if (fs.existsSync(CACHE_FILE)) {
    fs.unlinkSync(CACHE_FILE);
  }
  
  crawlCompleted = false;
  crawlData = [];
  
  // B·∫Øt ƒë·∫ßu crawl l·∫°i
  crawlJobs();
  
  res.json({ message: 'ƒê√£ b·∫Øt ƒë·∫ßu crawl l·∫°i...', isCrawling: true });
});

// API endpoint ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
app.get('/api/status', function (req, res) {
  res.json({
    isCrawling: isCrawling,
    crawlCompleted: crawlCompleted,
    dataCount: crawlData.length,
    hasCache: fs.existsSync(CACHE_FILE)
  });
});

// H√†m crawl d·ªØ li·ªáu
async function crawlJobs() {
  // Ki·ªÉm tra n·∫øu ƒëang crawl ho·∫∑c ƒë√£ ho√†n th√†nh
  if (isCrawling) {
    console.log('‚è≥ ƒêang crawl, vui l√≤ng ch·ªù...');
    return;
  }
  
  if (crawlCompleted) {
    console.log('‚úÖ ƒê√£ crawl ho√†n th√†nh, s·ª≠ d·ª•ng d·ªØ li·ªáu cache');
    return;
  }
  
  // Ki·ªÉm tra cache tr∆∞·ªõc
  if (loadCache()) {
    console.log('üì¶ ƒê√£ load d·ªØ li·ªáu t·ª´ cache, kh√¥ng c·∫ßn crawl l·∫°i');
    return;
  }
  
  isCrawling = true;
  
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu crawl d·ªØ li·ªáu...');
    console.log('üì° ƒêang t·∫£i trang ch√≠nh...');
    
    const html = await request({
      uri: 'https://giovannioutlet.com/collections/sale?gad_source=1&gad_campaignid=22827924712&gbraid=0AAAAA91RmBEwJ_UeFqXT4E6NrYmY0CL2W&gclid=CjwKCAjwmNLHBhA4EiwA3ts3mbE8ZPUIXlEVdN_8VmIIxmjDiAywhL0t7y5HVp00qwwZ6RONBGyO6RoCdvQQAvD_BwE',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    console.log('‚úÖ ƒê√£ t·∫£i trang ch√≠nh th√†nh c√¥ng!');

    const $ = cheerio.load(html);
    var data = [];

    // H√†m l·∫•y s·∫£n ph·∫©m t·ª´ HTML
    function getProductsFromHtml($html) {
      const products = [];
      $html('.product-loop').each((index, el) => {
        const title = $html(el).find('.proloop-detail h3 a').text().trim();
        const price = $html(el).find('.price').text().trim();
        const priceOld = $html(el).find('.price-del').text().trim();
        const sale = $html(el).find('.pro-sale').text().trim();
        const productUrl = $html(el).find('.proloop-link').attr('href');
        const fullUrl = productUrl ? `https://giovannioutlet.com${productUrl}` : null;

        products.push({
          title, price, priceOld, sale, url: fullUrl
        });
      });
      return products;
    }

    // H√†m crawl chi ti·∫øt s·∫£n ph·∫©m
    async function crawlProductDetails(productUrl) {
      try {
        const productHtml = await request({
          uri: productUrl,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });
        
        const $product = cheerio.load(productHtml);
        
        // L·∫•y th√¥ng tin chi ti·∫øt
        const productName = $product('.product-heading h1').text().trim();
        const productSku = $product('#pro_sku strong').text().trim();
        const productStatus = $product('.pro-soldold strong').text().trim();
        const productBrand = $product('.pro-vendor strong a').text().trim();
        const productPrice = $product('.pro-price').text().trim();
        const productOldPrice = $product('.product-price del').text().trim();
        const productDiscount = $product('.pro-percent').text().trim();
        
        // L·∫•y k√≠ch th∆∞·ªõc v√† m√†u s·∫Øc
        const sizes = [];
        $product('#variant-swatch-0 .swatch-element').each((i, el) => {
          const val = $product(el).attr('data-value')?.trim();
          if (val) sizes.push(val);
        });
        
        const colors = [];
        $product('#variant-swatch-1 .swatch-element').each((i, el) => {
          const val = $product(el).attr('data-value')?.trim();
          if (val) colors.push(val);
        });
        
        // L·∫•y h√¨nh ·∫£nh
        const imageUrls = [];
        $product('.productList-slider .product-gallery__photo').each((i, el) => {
          let url = $product(el).attr('data-image')?.trim();
          if (!url) {
            url = $product(el).find('a').attr('href')?.trim();
          }
          if (url) {
            if (url.startsWith('//')) url = 'https:' + url;
            imageUrls.push(url);
          }
        });
        
        // L·∫•y m√¥ t·∫£
        let desc = $product('.description-productdetail').text() || '';
        desc = desc.replace(/\u00a0/g, ' ').replace(/\s+/g, ' ').trim();
        
        return {
          SKU: { name: 'SKU', value: productSku },
          status: { name: 'Tr·∫°ng th√°i', value: productStatus },
          brand: { name: 'Th∆∞∆°ng hi·ªáu', value: productBrand },
          sizeList: sizes,
          colorList: colors,
          imageList: imageUrls,
          desc: desc
        };
        
      } catch (error) {
        return null;
      }
    }

    // H√†m load trang ti·∫øp theo
    async function loadNextPage(pageNumber) {
      try {
        const nextPageHtml = await request({
          uri: `https://giovannioutlet.com/collections/sale?page=${pageNumber}`,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'vi-VN,vi;q=0.9,en;q=0.8',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        });
        
        const $nextPage = cheerio.load(nextPageHtml);
        const newProducts = getProductsFromHtml($nextPage);
        
        return { $nextPage, newProducts };
        
      } catch (error) {
        return { $nextPage: null, newProducts: [] };
      }
    }

    // L·∫•y s·∫£n ph·∫©m t·ª´ trang ƒë·∫ßu ti√™n
    console.log('üîç ƒêang parse s·∫£n ph·∫©m trang 1...');
    let allProducts = getProductsFromHtml($);
    console.log(`üìä Trang 1: T√¨m th·∫•y ${allProducts.length} s·∫£n ph·∫©m`);

    // Load th√™m trang n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
    if (MAX_NEXT_PAGES > 0) {
      console.log(`üîÑ ƒêang load th√™m ${MAX_NEXT_PAGES} trang ti·∫øp theo...`);
      
      for (let pageNum = 2; pageNum <= MAX_NEXT_PAGES + 1; pageNum++) {
        console.log(`üì° ƒêang t·∫£i trang ${pageNum}...`);
        const { $nextPage, newProducts } = await loadNextPage(pageNum);
        
        if (newProducts.length === 0) {
          console.log(`‚ùå Trang ${pageNum} kh√¥ng c√≥ s·∫£n ph·∫©m, d·ª´ng load`);
          break;
        }
        
        // Ki·ªÉm tra tr√πng l·∫∑p
        const existingUrls = allProducts.map(p => p.url);
        const uniqueNewProducts = newProducts.filter(p => !existingUrls.includes(p.url));
        
        if (uniqueNewProducts.length === 0) {
          console.log(`‚ùå Trang ${pageNum}: T·∫•t c·∫£ s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i, d·ª´ng load`);
          break;
        }
        
        allProducts = allProducts.concat(uniqueNewProducts);
        console.log(`‚úÖ Trang ${pageNum}: Th√™m ${uniqueNewProducts.length} s·∫£n ph·∫©m m·ªõi (T·ªïng: ${allProducts.length})`);
        
        // Delay gi·ªØa c√°c request
        if (pageNum <= MAX_NEXT_PAGES) {
          console.log('‚è≥ Ch·ªù 1 gi√¢y...');
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
    }

    console.log(`üéØ T·ªïng c·ªông: ${allProducts.length} s·∫£n ph·∫©m`);

    // C·∫•u h√¨nh s·ªë s·∫£n ph·∫©m crawl
    const productsToCrawl = TEST_MODE ? allProducts.slice(0, MAX_PRODUCTS) : allProducts;
    console.log(`üß™ ${TEST_MODE ? 'Test mode' : 'Production mode'}: Crawl ${productsToCrawl.length}/${allProducts.length} s·∫£n ph·∫©m`);

    // ƒêi s√¢u v√†o t·ª´ng s·∫£n ph·∫©m tu·∫ßn t·ª±
    for (let i = 0; i < productsToCrawl.length; i++) {
      const product = productsToCrawl[i];
      
      console.log(`üîç [${i + 1}/${productsToCrawl.length}] ƒêang crawl: ${product.title.substring(0, 50)}...`);

      if (product.url) {
        const productDetails = await crawlProductDetails(product.url);
        
        if (productDetails) {
          data.push({
            ...product,
            ...productDetails
          });
          console.log(`‚úÖ [${i + 1}/${productsToCrawl.length}] Crawl th√†nh c√¥ng: ${product.title.substring(0, 30)}...`);
        } else {
          data.push({ ...product, status: 'L·ªói khi crawl chi ti·∫øt' });
          console.log(`‚ùå [${i + 1}/${productsToCrawl.length}] Crawl th·∫•t b·∫°i: ${product.title.substring(0, 30)}...`);
        }
      } else {
        console.log(`‚ö†Ô∏è [${i + 1}/${productsToCrawl.length}] Kh√¥ng c√≥ URL ƒë·ªÉ crawl`);
        data.push({ ...product, status: 'Kh√¥ng c√≥ URL' });
      }
    }

    // L∆∞u d·ªØ li·ªáu v√†o bi·∫øn global
    crawlData = data;
    crawlCompleted = true;
    
    // L∆∞u cache
    saveCache(data);

    console.log(`üéâ Ho√†n th√†nh crawl d·ªØ li·ªáu! T·ªïng: ${data.length} s·∫£n ph·∫©m`);
    
    // Click n√∫t "Xem th√™m s·∫£n ph·∫©m" sau khi crawl xong (n·∫øu ch∆∞a load ƒë·ªß trang)
    if (MAX_NEXT_PAGES === 0) {
      console.log('üîÑ ƒêang click n√∫t "Xem th√™m s·∫£n ph·∫©m"...');
      try {
        const loadMoreBtn = $('.btn-loadmore');
        
        if (loadMoreBtn.length > 0) {
          const dataPage = loadMoreBtn.attr('data-page');
          console.log(`üì° ƒêang t·∫£i trang ${dataPage}...`);
          
          const { $nextPage, newProducts } = await loadNextPage(dataPage);
          
          if (newProducts.length > 0) {
            console.log('‚úÖ Click th√†nh c√¥ng - C√≥ s·∫£n ph·∫©m m·ªõi ƒë∆∞·ª£c load');
            
            // Crawl th·ª≠ 1 s·∫£n ph·∫©m c·ªßa trang ti·∫øp theo
            console.log('üîç ƒêang crawl th·ª≠ 1 s·∫£n ph·∫©m trang ti·∫øp theo...');
            
            const firstProduct = $nextPage('.product-loop').first();
            const nextProductTitle = firstProduct.find('.proloop-detail h3 a').text().trim();
            const nextProductUrl = firstProduct.find('.proloop-link').attr('href');
            const nextProductFullUrl = nextProductUrl ? `https://giovannioutlet.com${nextProductUrl}` : null;
            
            if (nextProductFullUrl) {
              const productDetails = await crawlProductDetails(nextProductFullUrl);
              
              if (productDetails) {
                const newProduct = {
                  title: nextProductTitle,
                  url: nextProductFullUrl,
                  ...productDetails
                };
                
                data.push(newProduct);
                crawlData = data;
                
                console.log(`‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m m·ªõi! T·ªïng: ${data.length} s·∫£n ph·∫©m`);
              } else {
                console.log('‚ùå Kh√¥ng th·ªÉ crawl s·∫£n ph·∫©m m·ªõi');
              }
            } else {
              console.log('‚ö†Ô∏è Kh√¥ng c√≥ URL s·∫£n ph·∫©m ƒë·ªÉ crawl');
            }
          } else {
            console.log('‚ö†Ô∏è Click th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ s·∫£n ph·∫©m m·ªõi');
          }
        } else {
          console.log('‚ùå Kh√¥ng t√¨m th·∫•y n√∫t "Xem th√™m s·∫£n ph·∫©m"');
        }
      } catch (error) {
        console.log(`‚ùå L·ªói khi click n√∫t "Xem th√™m s·∫£n ph·∫©m": ${error.message}`);
      }
    }
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    console.log('\nüéØ ===== K·∫æT TH√öC CRAWL =====');
    console.log(`üìä T·ªïng s·∫£n ph·∫©m ƒë√£ crawl: ${data.length}`);
    console.log(`‚è∞ Th·ªùi gian ho√†n th√†nh: ${new Date().toLocaleString('vi-VN')}`);
    console.log('üåê Server ƒëang ch·∫°y t·∫°i: http://localhost:3000');
  } catch (error) {
    console.log(`‚ùå L·ªói crawl: ${error.message}`);
  } finally {
    isCrawling = false;
  }
}

app.listen(3000, function () {
  console.log('üöÄ Server ƒëang ch·∫°y t·∫°i: http://localhost:3000');
  console.log('üìä Dashboard: http://localhost:3000');
  console.log('üîó API: http://localhost:3000/api/data');
  console.log('‚è≥ ƒêang b·∫Øt ƒë·∫ßu crawl d·ªØ li·ªáu...\n');
  
  // Ch·∫°y crawl ngay khi server start
  crawlJobs();
});